# roles/generate_appregdefs/tasks/render_single_appdef.yaml
- name: Ensure tmp_render_dir fact is set
  set_fact:
    tmp_render_dir: "{{ tmp_render_dir | default('/tmp') }}"

- name: Prepare appdefs dict for Jinja context
  set_fact:
    appdefs:
      overrides: "{{ appdefs_overrides }}"

- name: Extract template base name
  set_fact:
    template_name: "{{ item.path | basename | regex_replace('\\.j2$', '') }}"

- name: Load raw AppDef template
  slurp:
    src: "{{ item.path }}"
  register: appdef_raw_slurp

- name: Decode raw AppDef template
  set_fact:
    appdef_raw: "{{ appdef_raw_slurp.content | b64decode }}"

- name: Show raw content for debugging
  debug:
    var: appdef_raw
    verbosity: 0

# Extract metadata fields as plain strings
- name: Find name value in raw template
  set_fact:
    appdef_name: "{{ (appdef_raw | regex_search('name:\\s*\"([^\"]+)\"', '\\1'))[0] | default('') }}"

- name: Find artifactId value in raw template
  set_fact:
    artifactId: "{{ (appdef_raw | regex_search('artifactId:\\s*\"([^\"]+)\"', '\\1'))[0] | default('') }}"

- name: Find groupId value in raw template
  set_fact:
    groupId: "{{ (appdef_raw | regex_search('groupId:\\s*\"([^\"]+)\"', '\\1'))[0] | default('') }}"

- name: Debug extracted values
  debug:
    msg:
      - "Name: {{ appdef_name }}"
      - "ArtifactID: {{ artifactId }}"
      - "GroupID: {{ groupId }}"
      - "Lookup key: {{ groupId }}:{{ artifactId }}"
    verbosity: 0

- name: Create lookup key
  set_fact:
    app_lookup_key: "{{ groupId ~ ':' ~ artifactId }}"

- name: Check if key exists in overrides
  debug:
    msg: "Key '{{ app_lookup_key }}' {% if app_lookup_key in appdefs.overrides %}exists{% else %}does not exist{% endif %} in overrides"
    verbosity: 0

- name: Set render timestamp if not already set
  set_fact:
    render_timestamp: "{{ render_timestamp | default(lookup('pipe', 'date +%s')) }}"

- name: DEBUG â€“ Before rendering
  debug:
    msg:
      - "template_name={{ template_name }}"
      - "appdef_name={{ appdef_name }}"
      - "current_env defined? {{ current_env is defined }}"
    verbosity: 0

- name: Render AppDef template using Jinja
  template:
    src:  "{{ item.path }}"
    dest: "{{ tmp_render_dir }}/{{ template_name }}.{{ render_timestamp }}.rendered.appdef.yml"
  vars:
    current_env: "{{ current_env }}"
    appdefs:     "{{ appdefs }}"
    artifactId:  "{{ artifactId }}"
    groupId:     "{{ groupId }}"
    app_lookup_key: "{{ app_lookup_key }}"

- name: Read rendered AppDef into string
  slurp:
    src: "{{ tmp_render_dir }}/{{ template_name }}.{{ render_timestamp }}.rendered.appdef.yml"
  register: appdef_rendered_slurp

- name: Decode rendered AppDef string
  set_fact:
    appdef_raw_rendered: "{{ appdef_rendered_slurp.content | b64decode }}"

- name: Debug rendered AppDef
  debug:
    var: appdef_raw_rendered
    verbosity: 0

- name: Save final rendered AppDef
  copy:
    content: "{{ appdef_raw_rendered }}"
    dest:    "{{ current_env_dir }}/AppDefs/{{ appdef_name }}.appdef.yml"
    mode:    '0644'
  when: appdef_name is defined and appdef_name | length > 0
