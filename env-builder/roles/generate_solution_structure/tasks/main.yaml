---

- name: Check if sd.yaml exists in {{ sd_output_dir }}/{{ sd_cluster_name }}/{{ sd_env }}/Inventory/solution-descriptor
  stat:
    path: "{{ sd_output_dir }}/{{ sd_cluster_name }}/{{ sd_env }}/Inventory/solution-descriptor/sd.yaml"
  register: sd_file_existence

- name: Load applications data from sd.yaml
  include_vars:
    file: "{{ sd_output_dir }}/{{ sd_cluster_name }}/{{ sd_env }}/Inventory/solution-descriptor/sd.yaml"
    name: sd_config
  when: sd_file_existence.stat.exists

- name: Check that 'applications'-key exists
  assert:
    that:
      - "'applications' in sd_config"
      - "sd_config.applications is sequence"
    success_msg: "Root 'applications' key exists and is a list"
    fail_msg: "Missing or invalid 'applications' key in root"
  when: sd_file_existence.stat.exists

- name: Validate each application entry
  assert:
    that:
      - "'version' in item"
      - "'deployPostfix' in item"
      - "item.version is string"
      - "item.deployPostfix is string"
    success_msg: "Valid application entry: {{ item }}"
    fail_msg: "Invalid application entry: {{ item | to_nice_json }}"
  loop: "{{ sd_config.applications }}"
  loop_control:
    label: "Application {{ item.version | default('unknown') }}"
  when: sd_file_existence.stat.exists

- name: All checks passed
  debug:
    msg: "All required fields are present and valid!"
  when: sd_file_existence.stat.exists

- name: Transform structure in variable
  set_fact:
    all_environments: >-
      {%- set apps = sd_config.applications -%}
      {%- set grouped = {} -%}
      {%- for app in apps -%}
        {%- set parts = app.version.split(':', 1) -%}
        {%- set name = parts[0] -%}
        {%- set version = parts[1] if parts|length > 1 else '' -%}
        {%- if name not in grouped -%}
          {%- set _ = grouped.update({name: {}}) -%}
        {%- endif -%}
        {%- set _ = grouped[name].update({app.deployPostfix: {'version': version}}) -%}
      {%- endfor -%}
      {%- set result = {} -%}
      {%- for name in grouped.keys()|sort(reverse=true) -%}
        {%- set _ = result.update({name: grouped[name]}) -%}
      {%- endfor -%}
      {{ result }}
  when: sd_file_existence.stat.exists

- name: Show all_environments
  debug:
    var: all_environments
  when: sd_file_existence.stat.exists