---

- name: Check if sd.yaml exists in {{ sd_output_dir }}/{{ sd_cluster_name }}/{{ sd_env }}/Inventory/solution-descriptor
  stat:
    path: "{{ sd_output_dir }}/{{ sd_cluster_name }}/{{ sd_env }}/Inventory/solution-descriptor/sd.yaml"
  register: sd_file_existence

- name: Load applications data from sd.yaml
  include_vars:
    file: "{{ sd_output_dir }}/{{ sd_cluster_name }}/{{ sd_env }}/Inventory/solution-descriptor/sd.yaml"
    name: sd_config
  when: sd_file_existence.stat.exists

- name: Check that 'applications'-key exists
  assert:
    that:
      - "'applications' in sd_config"
      - "sd_config.applications is sequence"
    success_msg: "Root 'applications' key exists and is a list"
    fail_msg: "Missing or invalid 'applications' key in root"
  when: sd_file_existence.stat.exists

- name: Validate each application entry
  assert:
    that:
      - "'version' in item"
      - "'deployPostfix' in item"
      - "item.version is string"
      - "item.deployPostfix is string"
    success_msg: "Valid application entry: {{ item }}"
    fail_msg: "Invalid application entry: {{ item | to_nice_json }}"
  loop: "{{ sd_config.applications }}"
  loop_control:
    label: "Application {{ item.version | default('unknown') }}"
  when: sd_file_existence.stat.exists

- name: All checks passed
  debug:
    msg: "All required fields are present and valid!"
  when: sd_file_existence.stat.exists

- name: Initialize solution_structure
  set_fact:
    solution_structure: {}
  when: sd_file_existence.stat.exists

- name: Find all possible namespace templates
  find:
    paths: "{{ templates_dir }}/env_templates/{{ env_template_name }}/Namespaces"
    patterns:
      - "*.yaml.j2"
      - "*.yml.j2"
      - "*.j2"
    use_regex: false
  register: all_template_files
  when: sd_file_existence.stat.exists

- name: Build template path map by deployPostfix
  set_fact:
    postfix_template_map: "{{ dict(_postfix_keys | zip(_postfix_paths)) }}"
  vars:
    _postfix_paths: "{{ all_template_files.files | map(attribute='path') | list }}"
    _postfix_keys: >-
      {{
        all_template_files.files
        | map(attribute='path')
        | map('basename')
        | map('split', '.')
        | map('first')
        | list
      }}

#################DEBUG#################################################################
- name: Dummy test structure (robust via search)
  set_fact:
    solution_structure: >-
      {%- set struct = {} -%}
      {%- for postfix, path in postfix_template_map.items() -%}
        {%- set lines = lookup('file', path).split('\n') -%}
        {%- set name_line = lines | select('search', '^\\s*name\\s*:\\s*') | list | first | default('') -%}
        {%- set ns = name_line.split(':', 1)[1] | trim | replace('"', '') if name_line else None -%}
        {%- set struct = struct | combine({postfix: {'namespace': ns}}) -%}
      {%- endfor -%}
      {{ struct }}

- name: Print lines from each template file
  debug:
    msg: "{{ lookup('file', item).split('\n') }}"
  loop: "{{ postfix_template_map.values() }}"
  loop_control:
    label: "{{ item }}"
      
- name: Print lines from each template file
  debug:
    msg: "{{ lookup('file', item).split('\n') }}"
  loop: "{{ postfix_template_map.values() }}"



#############################################################

- name: Build final solution_structure
  set_fact:
    solution_structure: >-
      {%- set structure = {} -%}
      {%- for app in sd_config.applications -%}
        {%- set postfix = app.deployPostfix -%}
        {%- set version_full = app.version -%}
        {%- set version = version_full.split(':')[1] -%}
        {%- set solution = version_full.split(':')[0].split('-')[0] -%}

        {%- set path = postfix_template_map.get(postfix, None) -%}
        {%- if path -%}
          {%- set lines = lookup('file', path).split('\n') -%}
          {%- set name_line = lines | select('search', '^\\s*name\\s*:\\s*') | list | first | default('') -%}
          {%- set ns = (name_line.split(':', 1)[1] | trim | replace('"', '') ) if name_line else None -%}
        {%- else -%}
          {%- set ns = None -%}
        {%- endif -%}

        {%- set entry = {'version': version, 'namespace': ns} -%}
        {%- set existing = structure.get(solution, {}) | combine({postfix: entry}) -%}
        {%- set structure = structure | combine({solution: existing}) -%}
      {%- endfor -%}
      {{ structure }}
  when: sd_file_existence.stat.exists

- name: Show solution_structure
  debug:
    var: solution_structure
  when: sd_file_existence.stat.exists