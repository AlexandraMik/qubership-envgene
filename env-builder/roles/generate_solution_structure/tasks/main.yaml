---

- name: Check if sd.yaml exists in {{ sd_output_dir }}/{{ sd_cluster_name }}/{{ sd_env }}/Inventory/solution-descriptor
  stat:
    path: "{{ sd_output_dir }}/{{ sd_cluster_name }}/{{ sd_env }}/Inventory/solution-descriptor/sd.yaml"
  register: sd_file_existence

- name: Load applications data from sd.yaml
  include_vars:
    file: "{{ sd_output_dir }}/{{ sd_cluster_name }}/{{ sd_env }}/Inventory/solution-descriptor/sd.yaml"
    name: sd_config
  when: sd_file_existence.stat.exists

- name: Check that 'applications'-key exists
  assert:
    that:
      - "'applications' in sd_config"
      - "sd_config.applications is sequence"
    success_msg: "Root 'applications' key exists and is a list"
    fail_msg: "Missing or invalid 'applications' key in root"
  when: sd_file_existence.stat.exists

- name: Validate each application entry
  assert:
    that:
      - "'version' in item"
      - "'deployPostfix' in item"
      - "item.version is string"
      - "item.deployPostfix is string"
    success_msg: "Valid application entry: {{ item }}"
    fail_msg: "Invalid application entry: {{ item | to_nice_json }}"
  loop: "{{ sd_config.applications }}"
  loop_control:
    label: "Application {{ item.version | default('unknown') }}"
  when: sd_file_existence.stat.exists

- name: All checks passed
  debug:
    msg: "All required fields are present and valid!"
  when: sd_file_existence.stat.exists

- name: Initialize solution_structure
  set_fact:
    solution_structure: {}
  when: sd_file_existence.stat.exists

- name: Build final solution_structure
  vars:
    templates_base: "{{ templates_dir }}/env_templates/{{ env_template_name }}/Namespaces"
  set_fact:
    solution_structure: >-
      {%- set structure = {} -%}
      {%- for app in sd_config.applications -%}
        {%- set postfix = app.deployPostfix -%}
        {%- set path = templates_base ~ '/' ~ postfix ~ '.yaml.j2' -%}
        {%- set exists = lookup('ansible.builtin.file', path, errors='ignore') is not none -%}
        {%- if exists -%}
          {%- set lines = lookup('file', path).split('\n') -%}
          {%- set name_line = lines | select('search', '^\\s*name\\s*:\\s*') | list | first | default('') -%}
          {%- set ns = (name_line.split(':', 1)[1] | trim | replace('"', '')) if name_line else None -%}
        {%- else -%}
          {%- set ns = None -%}
        {%- endif -%}

        {# разбор имени образа: postgres, postgres-toms и т.д. #}
        {%- set parts = app.version.split(':')[0].split('-') -%}
        {%- set solution = parts[0] -%}
        {%- set key = postfix -%}
        {%- set version = app.version.split(':')[1] -%}
        {%- set inner = {'version': version, 'namespace': ns} -%}
        {%- set group = structure.get(solution, {}) | combine({key: inner}) -%}
        {%- set structure = structure | combine({solution: group}) -%}
      {%- endfor -%}
      {{ structure }}
  when: sd_file_existence.stat.exists

- name: Show all_environments
  debug:
    var: all_environments
  when: sd_file_existence.stat.exists