---

- name: Check if sd.yaml exists in {{ sd_output_dir }}/{{ sd_cluster_name }}/{{ sd_env }}/Inventory/solution-descriptor
  stat:
    path: "{{ sd_output_dir }}/{{ sd_cluster_name }}/{{ sd_env }}/Inventory/solution-descriptor/sd.yaml"
  register: sd_file_existence

- name: Load applications data from sd.yaml
  include_vars:
    file: "{{ sd_output_dir }}/{{ sd_cluster_name }}/{{ sd_env }}/Inventory/solution-descriptor/sd.yaml"
    name: sd_config
  when: sd_file_existence.stat.exists

- name: Check that 'applications'-key exists
  assert:
    that:
      - "'applications' in sd_config"
      - "sd_config.applications is sequence"
    success_msg: "Root 'applications' key exists and is a list"
    fail_msg: "Missing or invalid 'applications' key in root"
  when: sd_file_existence.stat.exists

- name: Validate each application entry
  assert:
    that:
      - "'version' in item"
      - "'deployPostfix' in item"
      - "item.version is string"
      - "item.deployPostfix is string"
    success_msg: "Valid application entry: {{ item }}"
    fail_msg: "Invalid application entry: {{ item | to_nice_json }}"
  loop: "{{ sd_config.applications }}"
  loop_control:
    label: "Application {{ item.version | default('unknown') }}"
  when: sd_file_existence.stat.exists

- name: All checks passed
  debug:
    msg: "All required fields are present and valid!"
  when: sd_file_existence.stat.exists

- name: Find all possible templates
  find:
    paths: "{{ templates_dir }}/env_templates/{{ env_template_name }}/Namespaces"
    patterns:
      - "*.yaml.j2"
      - "*.yml.j2"
      - "*.j2"
  register: template_files
  when: sd_file_existence.stat.exists

- name: Build namespace map from templates
  set_fact:
    namespace_map: >-
      {%- set ns_map = {} -%}
      {%- for file in template_files.files -%}
        {%- set base_name = file.path | basename -%}
        {%- set deploy_postfix = base_name.split('.') | first -%}
        {%- set template_content = lookup('file', file.path) -%}
        {%- set ns_name = (template_content | from_yaml).get('name', null) -%}
        {%- set ns_map = ns_map | combine({deploy_postfix: ns_name}) -%}
      {%- endfor -%}
      {{ ns_map }}
  when: sd_file_existence.stat.exists

- name: Transform structure in variable
  set_fact:
    all_environments: >-
      {%- set result = {} -%}
      {%- for app in sd_config.applications -%}
        {%- set parts = app.version.split(':', 1) -%}
        {%- set service = parts[0] -%}
        {%- set postfix = app.deployPostfix -%}

        {%- if service not in result -%}
          {%- result.update({service: {}}) -%}
        {%- endif -%}

        {%- set ns_value = namespace_map.get(postfix, null) -%}
        {%- set service_entry = {
            'version': parts[1],
            'namespace': ns_value
        } -%}

        {%- result[service].update({postfix: service_entry}) -%}
      {%- endfor -%}
      {{ dict(result | dictsort(reverse=true)) }}
  when: sd_file_existence.stat.exists

- name: Show all_environments
  debug:
    var: all_environments
  when: sd_file_existence.stat.exists